// <auto-generated />
using System;
using Authorization.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Authorization.EF.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    [Migration("20200218205107_AddIdentity")]
    partial class AddIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Authorization.Domain.Applications.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationId");

                    b.Property<string>("Audience");

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUrlId");

                    b.Property<Guid>("ApplicationId");

                    b.Property<int>("TypeCode")
                        .HasColumnName("ApplicationUrlTypeId");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TypeCode")
                        .IsUnique();

                    b.ToTable("ApplicationUrls");
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrlType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ApplicationUrlTypeId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUrlTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Claims URL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Authorization callback URL"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.Settings.SettingsEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SettingsEntryId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SettingsEntries");

                    b.HasData(
                        new
                        {
                            Id = "MicrosoftGraph:BaseUrl",
                            Value = "https://graph.microsoft.com/v1.0/"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:ProfileEndpoint",
                            Value = "me"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:MemberGroupsEndpoint",
                            Value = "me/getMemberGroups"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:MemberOfEndpoint",
                            Value = "me/memberOf"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:TransitiveMemberOfEndpoint",
                            Value = "me/transitiveMemberOf"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:GroupsEndpoint",
                            Value = "groups"
                        },
                        new
                        {
                            Id = "Jwt:Issuer",
                            Value = "Benraz Authorization Server"
                        },
                        new
                        {
                            Id = "Jwt:ValidityPeriod",
                            Value = "1.00:00:00"
                        },
                        new
                        {
                            Id = "Jwt:PrivateKeyPem"
                        },
                        new
                        {
                            Id = "Jwt:PublicKeyPem"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.SsoConnections.SsoConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SsoConnectionId");

                    b.Property<Guid?>("ApplicationId");

                    b.Property<string>("AuthorizationUrl")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("SsoProviderCode")
                        .HasColumnName("SsoProviderId");

                    b.Property<string>("TokenUrl")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SsoProviderCode");

                    b.ToTable("SsoConnections");
                });

            modelBuilder.Entity("Authorization.Domain.SsoProviders.SsoProvider", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("SsoProviderId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SsoProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Google"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.UsageLogs.UsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UsageLogId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.Property<string>("UserName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("UsageLogs");
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserClaimMappingEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserClaimMappingEntryId");

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<string>("SourceType");

                    b.Property<string>("SourceValue");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserClaimMappingEntries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15f3d112-5154-485b-b7d3-c83e50da08bb"),
                            CreateTimeUtc = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            SourceType = "groups",
                            SourceValue = "AuthorizationServer-Read",
                            Type = "roles",
                            UpdateTimeUtc = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Read"
                        },
                        new
                        {
                            Id = new Guid("dd19cb61-0bd8-4af0-a574-724ae3c9e28f"),
                            CreateTimeUtc = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            SourceType = "groups",
                            SourceValue = "AuthorizationServer-Write",
                            Type = "roles",
                            UpdateTimeUtc = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Write"
                        },
                        new
                        {
                            Id = new Guid("65f9f76f-1122-4b9b-9764-740feaa5b269"),
                            CreateTimeUtc = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            SourceType = "groups",
                            SourceValue = "AuthorizationServer-Admin",
                            Type = "roles",
                            UpdateTimeUtc = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Administrator"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("UserStatusId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blocked"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Payment service suspended"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Authorization.EF.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("StatusCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrl", b =>
                {
                    b.HasOne("Authorization.Domain.Applications.Application")
                        .WithMany("Urls")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Domain.Applications.ApplicationUrlType")
                        .WithOne()
                        .HasForeignKey("Authorization.Domain.Applications.ApplicationUrl", "TypeCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Authorization.Domain.SsoConnections.SsoConnection", b =>
                {
                    b.HasOne("Authorization.Domain.Applications.Application")
                        .WithMany("SsoConnections")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Domain.SsoProviders.SsoProvider", "SsoProvider")
                        .WithMany()
                        .HasForeignKey("SsoProviderCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.EF.Entities.User", b =>
                {
                    b.HasOne("Authorization.Domain.Users.UserStatus")
                        .WithMany()
                        .HasForeignKey("StatusCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}


