// <auto-generated />
using System;
using Authorization.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Authorization.EF.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    [Migration("20200222124710_AddClaims")]
    partial class AddClaims
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Authorization.Domain.Applications.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationId");

                    b.Property<string>("Audience");

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUrlId");

                    b.Property<Guid>("ApplicationId");

                    b.Property<int>("TypeCode")
                        .HasColumnName("ApplicationUrlTypeId");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TypeCode")
                        .IsUnique();

                    b.ToTable("ApplicationUrls");
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrlType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ApplicationUrlTypeId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUrlTypes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Authorization callback URL"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.Claims.IdentityClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClaimId");

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Authorization.Domain.Settings.SettingsEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SettingsEntryId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SettingsEntries");

                    b.HasData(
                        new
                        {
                            Id = "MicrosoftGraph:BaseUrl",
                            Value = "https://graph.microsoft.com/v1.0/"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:ProfileEndpoint",
                            Value = "me"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:MemberGroupsEndpoint",
                            Value = "me/getMemberGroups"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:MemberOfEndpoint",
                            Value = "me/memberOf"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:TransitiveMemberOfEndpoint",
                            Value = "me/transitiveMemberOf"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:GroupsEndpoint",
                            Value = "groups"
                        },
                        new
                        {
                            Id = "Jwt:Issuer",
                            Value = "Benraz Authorization Server"
                        },
                        new
                        {
                            Id = "Jwt:ValidityPeriod",
                            Value = "1.00:00:00"
                        },
                        new
                        {
                            Id = "Jwt:PrivateKeyPem"
                        },
                        new
                        {
                            Id = "Jwt:PublicKeyPem"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.SsoConnections.SsoConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SsoConnectionId");

                    b.Property<Guid?>("ApplicationId");

                    b.Property<string>("AuthorizationUrl")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("SsoProviderCode")
                        .HasColumnName("SsoProviderId");

                    b.Property<string>("TokenUrl")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SsoProviderCode");

                    b.ToTable("SsoConnections");
                });

            modelBuilder.Entity("Authorization.Domain.SsoProviders.SsoProvider", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("SsoProviderId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SsoProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Google"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.UsageLogs.UsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UsageLogId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("CreateTimeUtc");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateTimeUtc");

                    b.Property<string>("UserName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("UsageLogs");
                });

            modelBuilder.Entity("Authorization.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StatusCode");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusCode");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("UserStatusId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blocked"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Payment service suspended"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "d7b4f6d4-9cab-49ce-abf2-c0bc6d5d1ae2",
                            ConcurrencyStamp = "96fd1b42-0720-4de0-be3e-d51b5bb3476d",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "d14a3723-2ca1-49b2-9d58-50220836053d",
                            ConcurrencyStamp = "b1cc36c5-7958-450d-9363-70d81b4f02ab",
                            Name = "Organization user",
                            NormalizedName = "ORGANIZATION USER"
                        },
                        new
                        {
                            Id = "25c5290f-91bc-4c47-ad4f-9fc01f6191cd",
                            ConcurrencyStamp = "3cc4aba1-6b94-4af8-959d-e5cb3be30ace",
                            Name = "Tenant",
                            NormalizedName = "TENANT"
                        },
                        new
                        {
                            Id = "f80e34a1-e155-4a87-b2d5-7d1367963343",
                            ConcurrencyStamp = "bfb01b6e-d093-4e48-af66-08bcab57f9c2",
                            Name = "Property manager",
                            NormalizedName = "PROPERTY MANAGER"
                        },
                        new
                        {
                            Id = "48aa65a2-dc1c-4ce9-bf07-ee4c05973e58",
                            ConcurrencyStamp = "bbebc5db-8168-4ad1-8581-7d5e5d03d90f",
                            Name = "Service provider",
                            NormalizedName = "SERVICE PROVIDER"
                        },
                        new
                        {
                            Id = "2ada0e62-3793-4d90-b635-80e334362e65",
                            ConcurrencyStamp = "2e0b2011-c2f6-4837-8aa8-ff5c1aa79201",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "c5b42e20-e5b0-4f5c-a968-dd0050e21070",
                            ConcurrencyStamp = "2162f58e-8faf-4d89-9d1d-3feda66a0ee4",
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        },
                        new
                        {
                            Id = "042858f3-df80-41a9-b2f3-eff9a4a50ba9",
                            ConcurrencyStamp = "6e07524f-99da-47e4-9ea0-e510de7d0d55",
                            Name = "Internal server",
                            NormalizedName = "INTERNAL SERVER"
                        },
                        new
                        {
                            Id = "e3ffc4ce-4dc1-4ea4-91c4-7939fd9a2620",
                            ConcurrencyStamp = "54267f41-15fe-447c-896a-1cdd702d7ac2",
                            Name = "External server",
                            NormalizedName = "EXTERNAL SERVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrl", b =>
                {
                    b.HasOne("Authorization.Domain.Applications.Application")
                        .WithMany("Urls")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Domain.Applications.ApplicationUrlType")
                        .WithOne()
                        .HasForeignKey("Authorization.Domain.Applications.ApplicationUrl", "TypeCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Authorization.Domain.SsoConnections.SsoConnection", b =>
                {
                    b.HasOne("Authorization.Domain.Applications.Application")
                        .WithMany("SsoConnections")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Domain.SsoProviders.SsoProvider", "SsoProvider")
                        .WithMany()
                        .HasForeignKey("SsoProviderCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Authorization.Domain.Users.User", b =>
                {
                    b.HasOne("Authorization.Domain.Users.UserStatus")
                        .WithMany()
                        .HasForeignKey("StatusCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}


