// <auto-generated />
using System;
using Authorization.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Authorization.EF.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    partial class AuthorizationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Authorization.Domain.Addresses.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AddressId");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Applications.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("AccessTokenCookieName")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AccessTokenValidityPeriod")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Audience")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAccessTokenCookieEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccessTokenFragmentDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationUrlId");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeCode")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationUrlTypeId");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TypeCode");

                    b.ToTable("ApplicationUrls", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrlType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationUrlTypeId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUrlTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Authorization callback URL"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationTokenId");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpirationTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationTokens", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationTokenClaim", b =>
                {
                    b.Property<Guid>("ApplicationTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationTokenId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("ApplicationTokenClaims", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationTokenCustomField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationTokenCustomFieldId");

                    b.Property<Guid>("ApplicationTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTokenId");

                    b.ToTable("ApplicationTokenCustomFields", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationTokenRole", b =>
                {
                    b.Property<Guid>("ApplicationTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationTokenId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationTokenRoles", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Claims.IdentityClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClaimId");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Claims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("418270bb-d7ad-435b-8c8e-092d27da81b5"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-application-read"
                        },
                        new
                        {
                            Id = new Guid("3e151682-a45b-4459-815b-36be325fdf59"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-application-add"
                        },
                        new
                        {
                            Id = new Guid("49a2e542-d6da-4c7c-b2d7-13720b03619b"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-application-update"
                        },
                        new
                        {
                            Id = new Guid("b0f81152-cc31-49f9-bb4d-af49750fbebe"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-application-delete"
                        },
                        new
                        {
                            Id = new Guid("613f8d53-d4a9-4d7d-afc7-72190b8c6adb"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-read"
                        },
                        new
                        {
                            Id = new Guid("28aa11a0-6544-4bb2-96bd-6a2a98aebcdd"),
                            CreateTimeUtc = new DateTime(2020, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-add"
                        },
                        new
                        {
                            Id = new Guid("07ab8a18-fe49-489f-b772-0213d6abacc0"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-update"
                        },
                        new
                        {
                            Id = new Guid("f34e8539-03b4-47f5-98be-c9ae8808f527"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-delete"
                        },
                        new
                        {
                            Id = new Guid("b69dd26d-c726-4cb1-aa94-d0e483daa8d2"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-status-read"
                        },
                        new
                        {
                            Id = new Guid("2cb96ac2-a8d0-44ac-8b8f-4e344e77345a"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-status-suspend"
                        },
                        new
                        {
                            Id = new Guid("db1c7baa-1307-4b12-8136-60efa358036d"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-status-block"
                        },
                        new
                        {
                            Id = new Guid("c132c8ba-c564-4667-8b56-a9fea1fc7d24"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-role-read"
                        },
                        new
                        {
                            Id = new Guid("ff115094-c2f8-46a2-9cb6-b1458f9ef92e"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-role-update"
                        },
                        new
                        {
                            Id = new Guid("e40f31ab-2155-4084-9710-7c6a889cf071"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-claim-read"
                        },
                        new
                        {
                            Id = new Guid("6c9eb24a-39cd-4917-8483-08d7baf6949a"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-claim-update"
                        },
                        new
                        {
                            Id = new Guid("e837054c-4ad2-4792-ac9a-e45f91e5ddb3"),
                            CreateTimeUtc = new DateTime(2020, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-email-read"
                        },
                        new
                        {
                            Id = new Guid("a55395b3-2c9f-42af-ab29-f5ce752b57c9"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-email-verify"
                        },
                        new
                        {
                            Id = new Guid("f7958c48-3473-493e-902b-e99a2b930518"),
                            CreateTimeUtc = new DateTime(2020, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-phone-read"
                        },
                        new
                        {
                            Id = new Guid("461469ab-6a88-4e01-8b9c-b50bc41f5c47"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-phone-verify"
                        },
                        new
                        {
                            Id = new Guid("75baa2b9-b8d7-4d1c-a41c-e6cbc6a0d81f"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-user-password-reset"
                        },
                        new
                        {
                            Id = new Guid("0f5e1f02-75df-4cc0-80b3-79072f8c1000"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-role-read"
                        },
                        new
                        {
                            Id = new Guid("aa0eccb7-b213-4838-8a2f-f48f2edd68b4"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-role-add"
                        },
                        new
                        {
                            Id = new Guid("01af747a-c712-4c28-a95b-c7fd48434a47"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-role-update"
                        },
                        new
                        {
                            Id = new Guid("2a1d29ea-60ce-4358-ac90-0e16a6fd2b96"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-role-delete"
                        },
                        new
                        {
                            Id = new Guid("21310d21-7b58-478f-96a0-8cf35dbb95c0"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-claim-read"
                        },
                        new
                        {
                            Id = new Guid("b53984e1-2caa-487e-95fa-b95219c11e55"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-claim-add"
                        },
                        new
                        {
                            Id = new Guid("1a71b60b-7baf-47f6-8c08-950148b9fc43"),
                            CreateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "authorization-claim-delete"
                        },
                        new
                        {
                            Id = new Guid("b41fa3c7-3d0a-405e-aa46-da6060bca866"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-category-read"
                        },
                        new
                        {
                            Id = new Guid("e402e793-4c50-4f57-a396-6a724a84779f"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-priority-read"
                        },
                        new
                        {
                            Id = new Guid("bfd021cb-ddb8-4158-9adf-51e29d0fe27d"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-status-read"
                        },
                        new
                        {
                            Id = new Guid("6dc448af-7ba0-4440-97f7-c92577e9d408"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-provider-read"
                        },
                        new
                        {
                            Id = new Guid("fb36a55f-1b7b-46e3-bb88-2fd9af737a5c"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-provider-add"
                        },
                        new
                        {
                            Id = new Guid("c3ec6edb-b722-4f8d-af94-4c37cfc4fe30"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-provider-update"
                        },
                        new
                        {
                            Id = new Guid("446d3a60-d259-4ba2-b6f2-4f3b8c9b0ced"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-provider-delete"
                        },
                        new
                        {
                            Id = new Guid("63114fdf-9d2f-4e35-af6e-995938dbef55"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-client-read"
                        },
                        new
                        {
                            Id = new Guid("428b603b-9d08-48ff-bcc9-f2c19d5e1e81"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-client-add"
                        },
                        new
                        {
                            Id = new Guid("b3d5d053-8b4b-4a67-9691-ce9727bf7753"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-client-update"
                        },
                        new
                        {
                            Id = new Guid("e1ea0fd3-661d-413a-b625-06d07f1acb7f"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-client-delete"
                        },
                        new
                        {
                            Id = new Guid("0c3c76e1-6ee4-4715-987d-ac094ef8e81b"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-integration-read"
                        },
                        new
                        {
                            Id = new Guid("38184f60-d83a-4735-a095-73eb4b7984c9"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-integration-add"
                        },
                        new
                        {
                            Id = new Guid("a3dd97eb-0cff-4015-83e4-92228335e36b"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-integration-update"
                        },
                        new
                        {
                            Id = new Guid("ee9649ec-5bc4-4820-aa4f-2e343184ce94"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-integration-delete"
                        },
                        new
                        {
                            Id = new Guid("01ec1b7e-a09f-4a1a-b601-1adbf9a97a12"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-job-read"
                        },
                        new
                        {
                            Id = new Guid("1578c036-f217-4f90-855c-479150e553a1"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-job-executesynchronization"
                        },
                        new
                        {
                            Id = new Guid("1ea02e47-ab70-452a-8d0f-e6a1509f2296"),
                            CreateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "claim",
                            UpdateTimeUtc = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "erpmaintenance-maintenanceissue-read"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.Mfa.Mfa", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mfa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ConfirmEmail"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ResetPassword"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Action"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.Settings.SettingsEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SettingsEntryId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SettingsEntries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "MicrosoftGraph:BaseUrl",
                            Value = "https://graph.microsoft.com/v1.0/"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:ProfileEndpoint",
                            Value = "me"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:MemberGroupsEndpoint",
                            Value = "me/getMemberGroups"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:MemberOfEndpoint",
                            Value = "me/memberOf"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:TransitiveMemberOfEndpoint",
                            Value = "me/transitiveMemberOf"
                        },
                        new
                        {
                            Id = "MicrosoftGraph:GroupsEndpoint",
                            Value = "groups"
                        },
                        new
                        {
                            Id = "FacebookGraphGateway:BaseUrl",
                            Value = "https://graph.facebook.com/"
                        },
                        new
                        {
                            Id = "Jwt:Issuer",
                            Value = "Benraz Authorization Server"
                        },
                        new
                        {
                            Id = "Jwt:ValidityPeriod",
                            Value = "1.00:00:00"
                        },
                        new
                        {
                            Id = "Jwt:PasswordExpiredValidityPeriod",
                            Value = "00:05:00"
                        },
                        new
                        {
                            Id = "Jwt:PasswordExpiredAudience",
                            Value = "Authorization"
                        },
                        new
                        {
                            Id = "Jwt:SetPasswordValidityPeriod",
                            Value = "1.00:00:00"
                        },
                        new
                        {
                            Id = "Jwt:ConfirmEmailValidityPeriod",
                            Value = "1.00:00:00"
                        },
                        new
                        {
                            Id = "Jwt:SetPasswordAudience",
                            Value = "Authorization"
                        },
                        new
                        {
                            Id = "Jwt:PrivateKeyPem"
                        },
                        new
                        {
                            Id = "Jwt:PublicKeyPem"
                        },
                        new
                        {
                            Id = "UserPasswords:KeepUserPasswordsCount",
                            Value = "5"
                        },
                        new
                        {
                            Id = "UserPasswords:MaxAccessFailedCount",
                            Value = "6"
                        },
                        new
                        {
                            Id = "UserPasswords:LockoutPeriod",
                            Value = "00:30:00"
                        },
                        new
                        {
                            Id = "UserPasswords:PasswordExpirationPeriod"
                        },
                        new
                        {
                            Id = "Authorization:AuthorizeUnconfirmedEmailPeriod",
                            Value = "00:00:00"
                        },
                        new
                        {
                            Id = "Authorization:MfaCodeLength",
                            Description = "Mfa code length",
                            Value = "6"
                        },
                        new
                        {
                            Id = "Authorization:AccessTokenMfaCodeLength",
                            Description = "Access token code length",
                            Value = "10"
                        },
                        new
                        {
                            Id = "Authorization:IsMfaEnabled",
                            Description = "Enable mfa two factor service or not",
                            Value = "False"
                        },
                        new
                        {
                            Id = "Emails:From",
                            Value = "info@benraz.com"
                        },
                        new
                        {
                            Id = "Emails:FromDisplayName",
                            Value = "Benraz"
                        },
                        new
                        {
                            Id = "Emails:CompanyName",
                            Value = "Benraz"
                        },
                        new
                        {
                            Id = "Emails:CompanyLogoUrl",
                            Value = "https://www.benraz.com/wp-content/themes/benraz-by-dorzki/assets/images/logo.svg"
                        },
                        new
                        {
                            Id = "Emails:CompanyEmail",
                            Value = "support@benraz.com"
                        },
                        new
                        {
                            Id = "Emails:CompanyPhone",
                            Value = "1-888-497-5499"
                        },
                        new
                        {
                            Id = "Emails:ConfirmEmailSubject",
                            Description = "Confirmation email subject",
                            Value = "Email confirmation"
                        },
                        new
                        {
                            Id = "Emails:ResetPasswordSubject",
                            Description = "Reset password email subject",
                            Value = "Reset password"
                        },
                        new
                        {
                            Id = "Emails:MfaCodeSubject",
                            Description = "Mfa code email subject and replacing the {0} by action type",
                            Value = "Your BENRAZ {0} code"
                        },
                        new
                        {
                            Id = "Emails:ServiceProvider:ServiceType",
                            Description = "Email service provider type; 1 - Benraz services",
                            Value = "1"
                        },
                        new
                        {
                            Id = "Emails:ServiceProvider:Benraz:TemplateId",
                            Description = "Benraz email services default template identifier",
                            Value = "c7a628da-d901-4916-9618-984eeaa28fda"
                        },
                        new
                        {
                            Id = "Emails:ServiceProvider:Benraz:AccessToken",
                            Description = "Benraz email services access token"
                        },
                        new
                        {
                            Id = "Emails:ServiceProvider:Benraz:BaseUrl",
                            Description = "Benraz email services base URL"
                        },
                        new
                        {
                            Id = "User:DefaultRolesList",
                            Description = "Default roles list."
                        },
                        new
                        {
                            Id = "User:VerificationCodeCooldown",
                            Description = "Verification code cooldown.",
                            Value = "00:01:00"
                        },
                        new
                        {
                            Id = "UserActionNotifications:ReceiversEmails",
                            Description = "Receivers emails can be list of emails divided by ';'."
                        },
                        new
                        {
                            Id = "UserActionNotifications:IsLoginNotifyEnabled",
                            Description = "Enable send user login email service or not",
                            Value = "False"
                        },
                        new
                        {
                            Id = "UserActionNotifications:UserLoginEmailSubject",
                            Description = "User login email subject",
                            Value = "User logged"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.SsoConnections.SsoConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SsoConnectionId");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizationUrl")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("SsoProviderCode")
                        .HasColumnType("int")
                        .HasColumnName("SsoProviderId");

                    b.Property<string>("TokenUrl")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SsoProviderCode");

                    b.ToTable("SsoConnections", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.SsoProviders.SsoProvider", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("SsoProviderId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SsoProviders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Google"
                        });
                });

            modelBuilder.Entity("Authorization.Domain.UsageLogs.UsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsageLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UsageLogs", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZoneInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email");

                    b.HasIndex("FullName");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex")
                        .HasFilter("[NormalizedEmail] IS NOT NULL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("StatusCode");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserMfa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserMfaId");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCodeConsumed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSendSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("SendError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendThrough")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMfa");
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserPasswordId");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswords", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("UserStatusId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blocked"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Payment service suspended"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "23b143c8-3c3a-42dd-949c-dd1890ce778b",
                            ConcurrencyStamp = "524fc668-3c44-4cc1-9bf6-790fb537b15b",
                            Name = "New applicant",
                            NormalizedName = "NEW APPLICANT"
                        },
                        new
                        {
                            Id = "d7b4f6d4-9cab-49ce-abf2-c0bc6d5d1ae2",
                            ConcurrencyStamp = "96fd1b42-0720-4de0-be3e-d51b5bb3476d",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "d14a3723-2ca1-49b2-9d58-50220836053d",
                            ConcurrencyStamp = "b1cc36c5-7958-450d-9363-70d81b4f02ab",
                            Name = "Organization user",
                            NormalizedName = "ORGANIZATION USER"
                        },
                        new
                        {
                            Id = "25c5290f-91bc-4c47-ad4f-9fc01f6191cd",
                            ConcurrencyStamp = "3cc4aba1-6b94-4af8-959d-e5cb3be30ace",
                            Name = "Tenant",
                            NormalizedName = "TENANT"
                        },
                        new
                        {
                            Id = "f80e34a1-e155-4a87-b2d5-7d1367963343",
                            ConcurrencyStamp = "bfb01b6e-d093-4e48-af66-08bcab57f9c2",
                            Name = "Property manager",
                            NormalizedName = "PROPERTY MANAGER"
                        },
                        new
                        {
                            Id = "48aa65a2-dc1c-4ce9-bf07-ee4c05973e58",
                            ConcurrencyStamp = "bbebc5db-8168-4ad1-8581-7d5e5d03d90f",
                            Name = "Service provider",
                            NormalizedName = "SERVICE PROVIDER"
                        },
                        new
                        {
                            Id = "2ada0e62-3793-4d90-b635-80e334362e65",
                            ConcurrencyStamp = "2e0b2011-c2f6-4837-8aa8-ff5c1aa79201",
                            Name = "Property owner",
                            NormalizedName = "PROPERTY OWNER"
                        },
                        new
                        {
                            Id = "c5b42e20-e5b0-4f5c-a968-dd0050e21070",
                            ConcurrencyStamp = "2162f58e-8faf-4d89-9d1d-3feda66a0ee4",
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        },
                        new
                        {
                            Id = "042858f3-df80-41a9-b2f3-eff9a4a50ba9",
                            ConcurrencyStamp = "6e07524f-99da-47e4-9ea0-e510de7d0d55",
                            Name = "Internal server",
                            NormalizedName = "INTERNAL SERVER"
                        },
                        new
                        {
                            Id = "e3ffc4ce-4dc1-4ea4-91c4-7939fd9a2620",
                            ConcurrencyStamp = "54267f41-15fe-447c-896a-1cdd702d7ac2",
                            Name = "External server",
                            NormalizedName = "EXTERNAL SERVER"
                        },
                        new
                        {
                            Id = "89117c41-23b9-4330-ada1-57464fc84aa0",
                            ConcurrencyStamp = "1b944e7f-b96f-48b1-a71a-4d54f72ade21",
                            Name = "authorization-administrator",
                            NormalizedName = "AUTHORIZATION-ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleClaimId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "claim",
                            ClaimValue = "authorization-application-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -2,
                            ClaimType = "claim",
                            ClaimValue = "authorization-application-add",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -3,
                            ClaimType = "claim",
                            ClaimValue = "authorization-application-update",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -4,
                            ClaimType = "claim",
                            ClaimValue = "authorization-application-delete",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -5,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -6,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-update",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -7,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-delete",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -8,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-status-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -9,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-status-suspend",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -10,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-status-block",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -11,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-role-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -12,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-role-update",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -13,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-claim-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -14,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-claim-update",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -15,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-email-verify",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -16,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-phone-verify",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -17,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-password-reset",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -18,
                            ClaimType = "claim",
                            ClaimValue = "authorization-role-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -19,
                            ClaimType = "claim",
                            ClaimValue = "authorization-role-add",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -20,
                            ClaimType = "claim",
                            ClaimValue = "authorization-role-update",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -21,
                            ClaimType = "claim",
                            ClaimValue = "authorization-role-delete",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -22,
                            ClaimType = "claim",
                            ClaimValue = "authorization-claim-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -23,
                            ClaimType = "claim",
                            ClaimValue = "authorization-claim-add",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -24,
                            ClaimType = "claim",
                            ClaimValue = "authorization-claim-delete",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -25,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-email-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -26,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-phone-read",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        },
                        new
                        {
                            Id = -27,
                            ClaimType = "claim",
                            ClaimValue = "authorization-user-add",
                            RoleId = "89117c41-23b9-4330-ada1-57464fc84aa0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserClaimId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.Applications.ApplicationUrl", b =>
                {
                    b.HasOne("Authorization.Domain.Applications.Application", null)
                        .WithMany("Urls")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authorization.Domain.Applications.ApplicationUrlType", null)
                        .WithOne()
                        .HasForeignKey("Authorization.Domain.Applications.ApplicationUrl", "TypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationTokenClaim", b =>
                {
                    b.HasOne("Authorization.Domain.ApplicationTokens.ApplicationToken", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authorization.Domain.Claims.IdentityClaim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationTokenCustomField", b =>
                {
                    b.HasOne("Authorization.Domain.ApplicationTokens.ApplicationToken", null)
                        .WithMany("CustomFields")
                        .HasForeignKey("ApplicationTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationTokenRole", b =>
                {
                    b.HasOne("Authorization.Domain.ApplicationTokens.ApplicationToken", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Authorization.Domain.SsoConnections.SsoConnection", b =>
                {
                    b.HasOne("Authorization.Domain.Applications.Application", null)
                        .WithMany("SsoConnections")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Domain.SsoProviders.SsoProvider", "SsoProvider")
                        .WithMany()
                        .HasForeignKey("SsoProviderCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SsoProvider");
                });

            modelBuilder.Entity("Authorization.Domain.Users.User", b =>
                {
                    b.HasOne("Authorization.Domain.Addresses.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Authorization.Domain.Users.UserStatus", null)
                        .WithMany()
                        .HasForeignKey("StatusCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserMfa", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User", null)
                        .WithMany("UserMfas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserPassword", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.Domain.Users.UserRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authorization.Domain.Users.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Authorization.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authorization.Domain.Applications.Application", b =>
                {
                    b.Navigation("SsoConnections");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("Authorization.Domain.ApplicationTokens.ApplicationToken", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("CustomFields");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Authorization.Domain.Users.User", b =>
                {
                    b.Navigation("UserMfas");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
